import cv2
from djitellopy import Tello
import time

# --- Drone and Hardware Setup ---
drone = Tello()
drone.connect()
drone.streamon()

# --- Load Face Recognition Model ---
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

def activate_night_vision():
    print("[INFO] Activating night vision.")

def activate_thermal_sensor():
    print("[INFO] Thermal sensor ON.")

def activate_spotlight():
    print("[INFO] Spotlight ON.")

def activate_taser():
    print("[INFO] Taser ACTIVATED! (placeholder)")

def avoid_obstacle():
    print("[INFO] Object detected, executing dodge maneuver...")
    drone.move_left(50)

def return_to_home():
    print("[INFO] Returning to base...")
    drone.go_home()

def dock_for_charging():
    print("[INFO] Docking for automatic charging.")

# --- Emergency Response Handler ---
def respond_to_sos(location):
    print(f"[INFO] SOS received. Navigating to location {location}.")
    drone.takeoff()
    drone.move_forward(100)  # Simulate navigation
    # Obstacle avoidance (mock)
    avoid_obstacle()
    # Environmental Analysis
    activate_night_vision()  # Use light sensor for real hardware
    activate_thermal_sensor()
    activate_spotlight()
    # Face Recognition and Defense
    stream_and_recognize()
    # After mission
    activate_taser()
    return_to_home()
    dock_for_charging()
    drone.land()

def stream_and_recognize():
    print("[INFO] Starting live stream and analyzing faces.")
    for _ in range(150):  # Simulated loop for ~5 seconds
        frame = drone.get_frame_read().frame
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            print("[INFO] Criminal face detected, sending to server.")
        cv2.imshow("Drone Live Stream", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cv2.destroyAllWindows()

# --- Simulate SOS App Trigger ---
if __name__ == "__main__":
    # Location could be replaced by GPS coordinates received from app/server
    LOCATION = {'latitude': 17.385, 'longitude': 78.486}
    respond_to_sos(LOCATION)
